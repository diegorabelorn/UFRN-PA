Nome: DIEGO RODRIGO RABELO DOS SANTOS
Matricula: 20210017662

Questao 1:
p == &i; Ao comparar o valor armazenado em "p" com o endereço de memória de "i" apontam para o mesmo endereço de memória, portanto setença verdadeira = 1.
*p - *q; O resultado é -2, uma vez que "*p" aponta para o valor de "i" (3) e "*q" aponta para o conteúdo de "j" (5).
**&p; O resultado é 3, pois ao desrenferenciar "&p" o valor resultará em i (3).
---------------------------
Questao 2:
p = 4094
p+1 = 4096 (Soma de p + valor do tamanho de bytes (2))
*p+2 = 7 (Valor de *p=5 + 2)
**&p = 5 (Desreferenciando &p fica o valor de i=5)
3**p = 15 (3 * o valor de *p=5)
**&p+4 = 9 (Valor de **&p=5 + 4)

---------------------------
Questao 3:
*q = &j; Associação diferente, sendo "*q" um ponteiro de valor int e "&j" o endereço do ponteiro.
i = (*&)j; operação inválida pois desreferencia um endereço ainda não lido (j).

---------------------------
Questao 4:

a) 20 = O valor de "valor" foi modificado através do ponteiro "p1" para 20.
b) 29.0 = O valor de "temp" foi modificado através do ponteiro "p2" para 29.0.
c) P = O valor de "aux" aponta para o valor de "p3" que referencia para o endereço de "nome[0]" da palavra "Ponteiros". 
d) e = O valor de "aux" aponta para o valor de "p3" que referencia para o endereço de "nome[4]" da palavra "Ponteiros".
e) P = O valor de "p3=nome" aponta para o primeiro char de "Ponteiros".
f) e = O valor de "p3" aponta para o quinto char de "Ponteiros".
g) t = O valor de "p3" é decrementado uma posição da palavra "Ponteiros". de "e" para "t".
h) 31 = A variavel "idade" aponta para o valor de "p4" que é igual ao primeiro elemento do endereço de "vetor" [0].
i) 45 = A variavel "idade" aponta para o valor de "p5" que é igual ao segundo elemento do endereço de "vetor" [1], pois soma "p4+1", sendo p4[0].
j) 27 = A variavel "idade" aponta para o valor de "p4" que é igual ao terceiro elemento do endereço de "vetor" [2], pois soma "p5+1", sendo p5[1].
l) 31 = A variavel "idade" aponta para o valor de "p4" que é igual ao primeiro elemento do endereço de "vetor" [0], pois decrementa "p4-2", sendo p4[2].
m) 45 = O valor de "p5" aponta para "vetor[1]"=45, pois decrementa a posição [2] - [1]. 
n) 27 = O valor de "p5" é incrementado uma posição, indo para "vetor[2]. 

---------------------------
Questao 5:

contador/valor/valor/endereco/endereco
i = 0 vet[0] = 1.1 *(f + 0) = 1.1 &vet[0] = BB0C4C40 (f + 0) = BB0C4C40 
i = 1 vet[1] = 2.2 *(f + 1) = 2.2 &vet[1] = BB0C4C44 (f + 1) = BB0C4C44
i = 2 vet[2] = 3.3 *(f + 2) = 3.3 &vet[2] = BB0C4C48 (f + 2) = BB0C4C48
i = 3 vet[3] = 4.4 *(f + 3) = 4.4 &vet[3] = BB0C4C4C (f + 3) = BB0C4C4C
i = 4 vet[4] = 5.5 *(f + 4) = 5.5 &vet[4] = BB0C4C50 (f + 4) = BB0C4C50

Uma vez que "f" está apontando para o primeiro elemento do vetor "vet" teremos os valores de "f" e "vet" iguais para cada indice analisado e somado, assim como os endereços serão os mesmos.

---------------------------
Questao 6:

*(pulo + 2)
pulo + 2;

---------------------------
Questao 7:

p = mat + 1; Válida e p está apontando para o segundo elemento de "mat" [1]. 
p = mat; Válida e p está apontando para o primeiro elemendo do vetor "mat" [0].
p = mat; Válida e p está apontando para o primeiro elemendo do vetor "mat" [0].
x = (*mat); Válida e x está apontando para o primeiro elemendo do vetor "mat" [0].

---------------------------
Questao 8:

a) 4 9 13 --> Mostra os valores do vetor "vet". "*(vet+i)" primeiro soma a posição do vetor + o indice e desreferencia, ou seja, mostra o valor da posição. 
b) A1EEA49C A1EEA4A0 A1EEA4A4 --> Mostra o endereço alocado para cada elemento do vetor.
---------------------------
Questao 9:
O código precisa ser ajustado.
Ajuste 1: 
- Atribuir os valore de "x" e "nome" na estrutura principal e não na função struct.
- É preciso alocar o ponteir *s da struct em malloc.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct teste {
    int x;
    char nome[10];
};

int main() {
    struct teste *s = malloc(sizeof(struct teste));
    s->x = 3; // Atribuir valor a x
    strcpy(s->nome, "jose"); 

    printf("%d\n", s->x);
    printf("%s", s->nome);

    return 0;
}

O resultado é:
3
Jose
---------------------------
Questao 10:

O código é indefinido.

#include <stdio.h>

void main(){ // mudar para int.
    int const *x = 3; 
    printf("%d", ++(*x)); //não pode modificar o valor de uma constante. 
}

---------------------------
Questao 11:

#include <stdio.h>

int main() {
    char c[4];
    int i[4];
    float f[4];
    double d[4];
    
    printf("char:   %d, %d, %d, %d\n", c, c+1, c+2, c+3);
    printf("int:    %d, %d, %d, %d\n", i, i+1, i+2, i+3);
    printf("float:  %d, %d, %d, %d\n", f, f+1, f+2, f+3);
    printf("double: %d, %d, %d, %d\n", d, d+1, d+2, d+3);
}

Saídas do programa: O tamanho da variável "int' e "float" é de 4 bytes cada.
Saídas idealizada pela questão:
char:   4092, 4093, 4094, 4095
int:    4092, 4094, 4096, 4098
float:  4092, 4096, 4100, 4104
double: 4092, 4100, 4108, 4112

---------------------------
Questao 12:

aloha[2] = value; - Válido
scanf("%f", &aloha); - Inválido. "aloha" é um vetor.
aloha = "value"; - Inválido. "aloha" é um vetor.
printf("%f", aloha); - Inválido. "aloha" é um vetor.
coisas[4][4] = aloha[3]; - Válido
coisas[5] = aloha; - i=Inválido. "aloha" é um vetor.
pf = value; - Inválido
pf = aloha; - Válido
---------------------------
Questao 13:
Memory leak é a utilização da memória de forma não gerenciavél, ou seja, quando a memória não utilizada não é liberada para o programa, causando futuros travamentos e alto consumo da memória. 
Exemplo 1: A utilização da função "malloc" aloca bytes na memória heap, ou seja, uma memória finita que necessita de liberação do programador.

#include <stdio.h>
#include <stdlib.h>

int sum(int x, int y){
    int *result = malloc(1 * sizeof(int));
    
    *result = x + y;
    return *result;
}

int main(){
    int x;
    
    scanf("%d", &x);
    printf("%d + 5 = %d\n", x, sum(x, 5));
    
    return 0;
}

Exemplo 2: Utilizando "malloc" e não liberando o sistema com "free()".

#include <stdio.h>
#include <stdlib.h>

int main() {
    int *ptr = malloc(sizeof(int)); 
    if (ptr == NULL) {
        printf("Erro\n");
        return 1;
    }

    *ptr = 10; 

    return 0;
}

Exemplo 3: Utilizando "calloc" para um array de 5 inteiros e não liberando o sistema com "free()".
#include <stdio.h>
#include <stdlib.h>

int main() {
    int *ptr = calloc(5, sizeof(int));

    if (ptr == NULL) {
        printf("Erro\n");
        return 1;
    }

    for (int i = 0; i < 5; i++) {
        ptr[i] = i + 1;
    }

    return 0;
}


---------------------------
Questao 14:
R: O ponteiro de função permite, através de um ponteiro, chamar uma função desejada.


#include <stdio.h>

int sum(int a, int b, int c) { //função soma de 3 varáveis.
    return a + b + c;
}

int main(){
   int (*ptr_sum)(int, int, int);           //declarando o ponteiro para a função.
   ptr_sum = sum;                           //iniciar ponteiro para a função "sum".
   int resultado = (*ptr_sum)(8, 9, 3);     //chamando a função "sum" e definindo valores
   
   printf("%d",resultado);
}
---------------------------
Questao 15:

#include <stdio.h>

int main() {
    int n;
    printf("Digite a qtd de valores: ");
    scanf("%d", &n);
    
    float numeros[n];
    printf("Digite os " "%d " "valores: \n", n);
    for (int i = 0; i < n; i++) {
        scanf("%f", &numeros[i]);
    }

    for (int i = 1; i < 5; i++) {
        float chave = numeros[i];
        int j = i - 1;
        while (j >= 0 && numeros[j] > chave) {
            numeros[j + 1] = numeros[j];
            j = j - 1;
        }
        numeros[j + 1] = chave;
    }
    printf("crescente: ");
    for (int i = 0; i < 5; i++) {
        printf("%f ", numeros[i]);
    }
    return 0;
}
---------------------------
Questao 16:

#include <stdio.h>
#include <stdlib.h>

//Criando a função de comparação
int compare (const void *a, const void *b){ 
if (*(float*) a < *(float*)b) return -1; //compara: se a é menor que b retorna -1; 
if (*(float*) a == *(float*)b) return 0;//compara: se a é igual a b retorna 0;
if (*(float*) a > *(float*)b) return 1; //compara: se a é maior que b retorna 1;
}

//Criando função ordenar qsort
float ordenar(float *numeros, int n) { //função que recebe o array int numeros e o tamanho n.
qsort(numeros, n, sizeof(int), compare); //função qsort recebe o array numero e o tamanho , o tamanho de cada int "sizeof" e a função compare.
}

int main(){

//escrevendo a qtd de valores    
int n;
printf("Digite a qtd de valores: ");
scanf("%d", &n);

//digitando os valores
float numeros[n];
printf("Digite os " "%d " "valores: \n", n);
for (int i = 0; i < n; i++) {
    scanf("%f", &numeros[i]);
}

//chamando a função ordenar qsort
ordenar(numeros, n); //chama a função ordenar e passa o array numero e o tamanho n
for (int i=0; i<n; i++){
	printf("%f ", numeros[i]);
}
return 0;
}

---------------------------
Questao 17:

#include <stdio.h>
#include <stdlib.h>

//Criando a função de comparação
int compare(const void *a, const void *b) {
int x = *(int*)a; //transformando o ponteiro a em ponteiro para int
int y = *(int*)b; //transformando o ponteiro b em ponteiro para int
if (x < y) return -1;
else if (x == y) return 0;
else return 1;
}

//Criando função ordenar qsort
int ordenar(int *numeros, int n) { //função que recebe o array int numeros e o tamanho n.
qsort(numeros, n, sizeof(int), compare); //função qsort recebe o array numero e o tamanho , o tamanho de cada int "sizeof" e a função compare.
}

int main() {
//escrevendo a qtd de valores 
int n;
printf("Digite a qtd de valores: ");
scanf("%d", &n);

//digitando os valores
int numeros[n];
printf("Digite os %d valores:\n", n);
for (int i = 0; i < n; i++) {
    scanf("%d", &numeros[i]);
}

//chamando a função qsort
ordenar(numeros, n); //chama a função ordenar e passa o array numero e o tamanho n
for (int i = 0; i < n; i++) {
    printf("%d ", numeros[i]);
}
return 0;
}
---------------------------
Questao 18:

------Código questão 16:---------

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

//Criando a função de comparação
int compare (const void *a, const void *b){ 
if (*(int*) a < *(int*)b) return -1; //compara: se a é menor que b retorna -1; 
if (*(int*) a == *(int*)b) return 0;//compara: se a é igual a b retorna 0;
if (*(int*) a > *(int*)b) return 1; //compara: se a é maior que b retorna 1;
}

//Criando função ordenar qsort
int ordenar(int *numeros, int n) { //função que recebe o array int numeros e o tamanho n.

clock_t inicio = clock(); // Captura o tempo de início da execução

qsort(numeros, n, sizeof(int), compare); //função qsort recebe o array numero e o tamanho , o tamanho de cada int "sizeof" e a função compare.

clock_t fim = clock(); // Captura o tempo de fim da execução
    
double tempo_execucao = (double)(fim - inicio) / CLOCKS_PER_SEC;

printf("Tempo de execução: %.6f segundos\n", tempo_execucao); 
    
}

int main(){

//escrevendo a qtd de valores    
int n;
printf("Digite a qtd de valores: ");
scanf("%d", &n);

//digitando os valores
int numeros[n];
printf("Digite os " "%d " "valores: \n", n);
for (int i = 0; i < n; i++) {
    scanf("%d", &numeros[i]);
}

//chamando a função ordenar qsort
ordenar(numeros, n); //chama a função ordenar e passa o array numero e o tamanho n
for (int i=0; i<n; i++){
	printf("%d ", numeros[i]);
}
return 0;
}

-----CÓDIGO QUESTÃO 17:-----

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

//Criando a função de comparação
int compare(const void *a, const void *b) {
    int x = *(int*)a; //transformando o ponteiro a em ponteiro para int
    int y = *(int*)b; //transformando o ponteiro b em ponteiro para int
    if (x < y) return -1;
    else if (x == y) return 0;
    else return 1;
}

//Criando função ordenar qsort
int ordenar(int *numeros, int n) { //função que recebe o array int numeros e o tamanho n.
    clock_t inicio = clock(); // Captura o tempo de início da execução
    
    qsort(numeros, n, sizeof(int), compare); //função qsort recebe o array numero e o tamanho , o tamanho de cada int "sizeof" e a função compare.

    clock_t fim = clock(); // Captura o tempo de fim da execução
    
    double tempo_execucao = (double)(fim - inicio) / CLOCKS_PER_SEC;

    printf("Tempo de execução: %.6f segundos\n", tempo_execucao);    
}

int main() {
//escrevendo a qtd de valores 
int n;
printf("Digite a qtd de valores: ");
scanf("%d", &n);

//digitando os valores
int numeros[n];
printf("Digite os %d valores:\n", n);
for (int i = 0; i < n; i++) {
    scanf("%d", &numeros[i]);
}

//chamando a função qsort
    ordenar(numeros, n); //chama a função ordenar e passa o array numero e o tamanho n
    for (int i = 0; i < n; i++) {
        printf("%d ", numeros[i]);
    }
    return 0;
}


----- RESULTADO -----
Ao processar o ordenamento de 20 numeros podemos notar que o código com a função para ponteiros (Questão 17) utilizou 0,000003 segundos
Enquanto o código com a função de ordenamento sem função para ponteiros (Questão 16) utilizou 0,000007.
Ou seja, o ponteiro para função foi mais rápido.

---------------------------
Questao 19:

#include <stdio.h>
#include <stdlib.h>

//Criando a função soma
int soma(int *v1, int *v2, int *vsoma, int n){
for (int i=0; i<n; i++){
    vsoma[i]=v1[i]+v2[i];
}
}

int main() {

//escrevendo a qtd de valores 
int n=4;

// vetor soma
int vsoma[n];

//digitando os valores de v1
int v1[n];
printf("Digite os %d valores de v1:\n", n);
for (int i = 0; i < n; i++) {
    scanf("%d", &v1[i]);
}

//digitando os valores de v2
int v2[n];
printf("Digite os %d valores de v2:\n", n);
for (int i = 0; i < n; i++) {
    scanf("%d", &v2[i]);
}

//Imprimir texto de soma
printf("A soma dos vetores :\n");

//chamando a função soma e imprimindo
soma(v1, v2, vsoma, n); //chama a função ordenar e passa o array numero e o tamanho n
for (int i = 0; i < n; i++) {
    printf("%d ", vsoma[i]);
}
    return 0;
}
---------------------------
Questao 20:
#include <stdio.h>

int main(){

// criando var de linhas e colunas das matrizes
int iA, jA, iB, jB, i, j, k;

// inserir o número de linhas e colunas das matrizes A e B
printf("Digite o numero de linhas da matriz A: ");
scanf("%d", &iA);
printf("Digite o numero de colunas da matriz A: ");
scanf("%d", &jA);
printf("Digite o numero de linhas da matriz B: ");
scanf("%d", &iB);
printf("Digite o numero de colunas da matriz B: ");
scanf("%d", &jB);
    
int A[iA][jA];
int B[iB][jB];
int C[iA][jB];
int valor;
    
if (jA == iB){
        
// Inserir os valores da matriz A
printf("Digite os valores da matriz A:\n");
for (i = 0; i < iA; i++) {
    for (j = 0; j < jA; j++) {
        scanf("%d", &A[i][j]);
    }
}
printf("\n");
    
//Inserir os valores da matriz B
printf("Digite os valores da matriz B:\n");
for (i = 0; i < iB; i++) {
    for (j = 0; j < jB; j++) {
        scanf("%d", &B[i][j]);
    }
}
printf("\n");

// Imprimir matrizes A e B
printf("Matriz A \n");
for(i = 0; i < iA; i++) {        
	for(j = 0; j < jA; j++) {
		printf("%d", A[i][j]);
		printf("  ");
	}
	printf("\n");
}
printf("Matriz B \n");
for(i = 0; i < iB; i++) {        
	for(j = 0; j < jB; j++) {
		printf("%d", B[i][j]);
		printf("  ");
	}
	printf("\n");
}
	
//Fazendo a operação de produto das matrizes A e B
valor=0;
for (i = 0; i < iA; i++) {
    for ( j = 0; j < jB; j++) { //ex: A32 B23 C33
        C[i][j] = 0; // define a matriz C[i][j] como 0
        for (k = 0; k < jA; k++) {
            valor = valor + A[i][k] * B[k][j];
        }
        C[i][j] = valor;
        valor = 0;
    }
}
    
// Imprimir a matriz C
printf("Matriz C \n");
for(i = 0; i < iA; i++) {
	for(j = 0; j < jB; j++) {
		printf("%d", C[i][j]);
		printf("  ");
	}
	printf("\n");
}
} else{
    printf("!!!Matriz sem multiplicação!!!");
}
}
---------------------------
Questao 21:
O erro está na letra D.
No código foram criados 2 ponteiros (m e n) apontando para 2 blocos de memória.
É feito a liberação do bloco de memória de m (Free) e portanto disponível para novas alocações para o mesmo endereço.
Porém, em seguida, é atribuído "m=n" fazendo com que m aponte para o bloco de memória de n e consequentemente
perdendo o acesso ao endereço primário devido a substituição, resultando em um memory leak.

 
---------------------------
Questao 22:
x= 15 (operação de OR)
y= 13 (Operação de XOR)
z= 0 (Operação de AND bit a bita)

seguindo o loop.
---------------------------
Questao 23:

Reposta correta: 
IV. I, apenas.

Item II: A função2 faz uma busca binária e por isso é mais eficiente que a busca linear do vetor que percorre todo elementos do vetor (no pior caso). 
Item III: A função2 faz uma implementação recursiva, chamando várias vezes a mesma função.

---------------------------
Questao 24:
<resposta da questao 2>
---------------------------
Questao 25:

---------------------------
